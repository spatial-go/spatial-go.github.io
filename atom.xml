<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://spatial-go.github.io</id>
    <title>Spatial-Go</title>
    <updated>2020-12-31T03:21:15.374Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://spatial-go.github.io"/>
    <link rel="self" href="https://spatial-go.github.io/atom.xml"/>
    <logo>https://spatial-go.github.io/images/avatar.png</logo>
    <icon>https://spatial-go.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Spatial-Go</rights>
    <entry>
        <title type="html"><![CDATA[Postgis 坐标系转换]]></title>
        <id>https://spatial-go.github.io/post/postgis-zuo-biao-xi-zhuan-huan/</id>
        <link href="https://spatial-go.github.io/post/postgis-zuo-biao-xi-zhuan-huan/">
        </link>
        <updated>2020-12-31T03:01:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="直接动态生成转换后数据库新字段">直接动态生成转换后数据库新字段</h1>
<p>Github: <a href="https://github.com/FreeGIS/Postgis_Coordinate_Transform">https://github.com/FreeGIS/Postgis_Coordinate_Transform</a></p>
<blockquote>
<p>支持WGS84与bd-09,gcj-02坐标系，百度经纬度与百度墨卡托之间互转。<br>
支持点线面多点多线多面的复杂图形批量转换。<br>
支持对整个表批处理转换。</p>
</blockquote>
<pre><code>约束：

要求转换的表是基于PostGIS创建的空间关系表 示例支持的表：
create table point_test(
  gid serial primary key,
  name text,
  geom geometry(Point,4326)
);
不支持的表：

create table point_test(
  gid serial primary key,
  name text,
  lon numeric,   --经度
  lat numeric     --纬度
);
不支持的表是普通关系表，非空间图形表。
</code></pre>
<p>要求转换的图形必须是二维图形 当前暂不支持三维或者多维，如带Z值的高程，带M值的测量值等</p>
<p>转换表图形坐标系必须是epsg:4326 除了将百度墨卡托坐标转百度经纬度外，其他转换方式，必须保证转换表的坐标系是4326，其他坐标系，需要用户使用ST_Transform函数，将其数据先转到4326坐标系下，再使用该工具。百度墨卡托坐标转百度经纬度转换，数据源必须是3857的。</p>
<p>图形数据是点线面多点多线多面 仅仅支持Point,LineString,Polygon,MultiPoint,MultiLineString,MultiPolygon六种明确类型。其他的PostGIS类型由于不常用，且不严格规范，通常不用于标准的空间数据库类型，暂时不考虑实现。</p>
<h1 id="sql语句查询转换">sql语句查询转换</h1>
<p>github：<a href="https://github.com/geocompass/pg-coordtransform">https://github.com/geocompass/pg-coordtransform</a></p>
<blockquote>
<p>基于PostgreSQL和PostGIS的坐标转换函数，支持点、线、面的WGS84、GCJ02以及BD09坐标系之间互转。</p>
</blockquote>
<p>安装： 复制geoc-pg-coordtansform.sql中代码，在数据库执行</p>
<pre><code>GCJ02转WGS84
select geoc_gcj02towgs84(geom) from test_table
WGS84转GCJ02
select geoc_wgs84togcj02(geom) from test_table
WGS84转BD09
select geoc_wgs84tobd09(geom) from test_table
BD09转WGS84
select geoc_bd09towgs84(geom) from test_table
GCJ02转BD09
select geoc_gcj02tobd09(geom) from test_table
BD09转GCJ02
select geoc_bd09togcj02(geom) from test_table
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[QGIS添加多种互联网底图]]></title>
        <id>https://spatial-go.github.io/post/qgis-tian-jia-duo-chong-hu-lian-wang-di-tu/</id>
        <link href="https://spatial-go.github.io/post/qgis-tian-jia-duo-chong-hu-lian-wang-di-tu/">
        </link>
        <updated>2020-12-31T02:56:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-操作步骤">一、操作步骤</h1>
<p>1、打开QGIS在左侧浏览面板的“XYZ Tiles”上点击鼠标右键，在菜单中选择“新建连接”。<br>
<img src="https://cdn.nlark.com/yuque/0/2019/png/265282/1558509383886-f8035b00-fd0c-474e-b0f2-43b72c8200ed.png#align=left&amp;display=inline&amp;height=637&amp;name=image.png&amp;originHeight=637&amp;originWidth=640&amp;size=360874&amp;status=done&amp;width=640" alt="image.png" loading="lazy"></p>
<p>2、在打开的面板中填入名称、网址、最大最小缩放级别等信息，点击“OK”保存连接。<br>
<img src="https://cdn.nlark.com/yuque/0/2019/png/265282/1558509465791-0b9016af-18f0-4276-929a-7b47a0f0f96d.png#align=left&amp;display=inline&amp;height=589&amp;name=image.png&amp;originHeight=589&amp;originWidth=871&amp;size=561805&amp;status=done&amp;width=871" alt="image.png" loading="lazy"></p>
<p>3、在左侧浏览面板“XYZ Tiles”节点下出现刚才添加的底图服务连接，通过双击或拖拽操作将底图添加到地图中。</p>
<h1 id="二-互联网底图服务">二、互联网底图服务</h1>
<p>1、高德style8</p>
<blockquote>
<p><a href="https://webrd01.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8">https://webrd01.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8</a></p>
</blockquote>
<p>2、高德style7</p>
<blockquote>
<p><a href="https://webrd01.is.autonavi.com/appmaptile?x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D&amp;lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7">https://webrd01.is.autonavi.com/appmaptile?x={x}&amp;y={y}&amp;z={z}&amp;lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7</a></p>
</blockquote>
<p>3、天地图</p>
<blockquote>
<p><a href="https://t7.tianditu.gov.cn/DataServer?T=vec_w&amp;X=%7Bx%7D&amp;Y=%7By%7D&amp;L=%7Bz%7D&amp;tk=31403cd1b45ca58e9db1e38a8a258c68">https://t7.tianditu.gov.cn/DataServer?T=vec_w&amp;X={x}&amp;Y={y}&amp;L={z}&amp;tk=31403cd1b45ca58e9db1e38a8a258c68</a></p>
</blockquote>
<p>4、天地图Label</p>
<blockquote>
<p><a href="http://t3.tianditu.com/DataServer?T=cva_w&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;l=%7Bz%7D">https://t3.tianditu.gov.cn/DataServer?T=cva_w&amp;x={x}&amp;y={y}&amp;l={z}</a><a href="https://t7.tianditu.gov.cn/DataServer?T=vec_w&amp;X=%7Bx%7D&amp;Y=%7By%7D&amp;L=%7Bz%7D&amp;tk=31403cd1b45ca58e9db1e38a8a258c68">&amp;tk=31403cd1b45ca58e9db1e38a8a258c68</a></p>
</blockquote>
<p>4、OpenStreetMap</p>
<blockquote>
<p><a href="http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png">http://a.tile.openstreetmap.org/{z}/{x}/{y}.png</a></p>
</blockquote>
<p>5、Google Street</p>
<blockquote>
<p><a href="https://mt1.google.com/vt/lyrs=m&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}</a></p>
</blockquote>
<p>6、Google Satellite</p>
<blockquote>
<p><a href="https://mt1.google.com/vt/lyrs=s&amp;x=%7Bx%7D&amp;y=%7By%7D&amp;z=%7Bz%7D">https://mt1.google.com/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}</a></p>
</blockquote>
<p>7、Esri Streets</p>
<blockquote>
<p><a href="https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/%7Bz%7D/%7By%7D/%7Bx%7D">https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solution Methods for VRP（Vehicle Routing Problem）]]></title>
        <id>https://spatial-go.github.io/post/solution-methods-for-vrpvehicle-routing-problem/</id>
        <link href="https://spatial-go.github.io/post/solution-methods-for-vrpvehicle-routing-problem/">
        </link>
        <updated>2020-12-31T02:16:03.000Z</updated>
        <content type="html"><![CDATA[<p>Here, the most commonly used techniques for solving Vehicle Routing Problems are listed. Near all of them are heuristics and metaheuristics because no exact algorithm can be guaranteed to find optimal tours within reasonable computing time when the number of cities is large. This is due to the NP-Hardness of the problem. Next we can find a classification of the solution techniques we have considered:</p>
<h1 id="exact-approaches精确求解">Exact Approaches（精确求解）</h1>
<p>As the name suggests, this approach proposes to compute every possible solution until one of the bests is reached.</p>
<ul>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/branch-and-bound">Branch and bound</a>（分支定界法）</p>
</li>
<li>
<p>Branch and cut（分支剪切法）</p>
</li>
</ul>
<h1 id="heuristics启发式">Heuristics（启发式）</h1>
<p><strong>启发式算法中文介绍</strong>：<a href="https://leovan.me/cn/2019/04/heuristic-algorithms/">https://leovan.me/cn/2019/04/heuristic-algorithms/</a></p>
<p>Heuristic methods perform a relatively limited exploration of the search space and typically produce good quality solutions within modest computing times.</p>
<h2 id="constructive-methods构造法">Constructive Methods（构造法）</h2>
<p>Gradually build a feasible solution while keeping an eye on solution cost, but do not contain an improvement phase per se.</p>
<ul>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/savings-algorithms/">Savings: Clark and Wright</a>（节约法）</p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/matching-based-savings-algorithm/">Matching Based</a></p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/multi-route-improvement-algorithm/">Multi-route Improvement Heuristics</a>（多路径改进算法）</p>
<ul>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/multi-route-improvement-algorithm/#ThompsonPsaraftis">Thompson and Psaraftis</a></p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/multi-route-improvement-algorithm/#VanBreedam">Van Breedam</a></p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/multi-route-improvement-algorithm/#KinderwaterSavelsbergh">Kinderwater and Savelsbergh</a></p>
</li>
</ul>
</li>
</ul>
<h2 id="2-phase-algorithm两阶段算法">2-Phase Algorithm（两阶段算法）</h2>
<p>The problem is decomposed into its two natural components: (1) clustering of vertices into feasible routes and (2) actual route construction, with possible feedback loops between the two stages.</p>
<ul>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/cluster-first-route-second-method/">Cluster-First, Route-Second Algorithms</a>（先聚类再排线）</p>
<ul>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/cluster-first-route-second-method/#FisherJaikumar">Fisher and Jaikumar</a></p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/cluster-first-route-second-method/#ThePetalAlgorithm">The Petal Algorithm</a></p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/cluster-first-route-second-method/#TheSweepAlgorithm">The Sweep Algorithm</a>（扫描算法）</p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/cluster-first-route-second-method/#Taillard">Taillard</a></p>
</li>
</ul>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/heuristics/route-first-cluster-second-method/">Route-First, Cluster-Second Algorithms</a>（先排线再聚类）</p>
</li>
</ul>
<h2 id="metaheuristics元启发式">Metaheuristics（元启发式）</h2>
<ul>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/metaheuristics/ant-algorithms/">Ant Algorithms</a>（蚁群算法）</p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/metaheuristics/constraint-programming-algorithm/">Constraint Programming</a>（约束编程）</p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/metaheuristics/deterministic-annealing/">Deterministic Annealing</a>（确定性退火）</p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/metaheuristics/genetic-algorithm/">Genetic Algorithms</a>（遗传算法）</p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/metaheuristics/simulated-annealing/">Simulated Annealing</a>（模拟退火）</p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/metaheuristics/tabu-search/">Tabu Search</a>（禁忌搜索）</p>
<ul>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/metaheuristics/tabu-search/#GranularTabu">Granular Tabu</a></p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/metaheuristics/tabu-search/#AdaptiveMemoryProcedure">The adaptative memory procedure</a></p>
</li>
<li>
<p><a href="http://neo.lcc.uma.es/vrp/solution-methods/metaheuristics/tabu-search/#KellyXu">Kelly and Xu</a></p>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spatial-Go正式成立啦！]]></title>
        <id>https://spatial-go.github.io/post/geoos/</id>
        <link href="https://spatial-go.github.io/post/geoos/">
        </link>
        <updated>2020-12-25T02:16:17.000Z</updated>
        <content type="html"><![CDATA[<p>我们的组织<code>spatial-go</code>正式成立，这是我们的第一个开源项目<code>Geoos</code>,<code>Geoos</code>提供有关空间数据和几何算法,使用<code>Go</code>语言包装实现。<br>
欢迎大家使用并提出宝贵意见！</p>
<h2 id="内容列表">内容列表</h2>
<ul>
<li><a href="#%E5%AE%89%E8%A3%85">安装</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">使用说明</a></li>
<li><a href="#%E7%BB%B4%E6%8A%A4%E8%80%85">维护者</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%B4%A1%E7%8C%AE">如何贡献</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E8%AE%B8%E5%8F%AF">使用许可</a></li>
</ul>
<h2 id="安装">安装</h2>
<p>项目依赖 <a href="https://github.com/libgeos/geos">GEOS</a>（GEOS 是 JTS 的C++版本实现) ,需要首先完成<code>GEOS</code>的安装。<code>GEOS</code>安装方法如下：</p>
<p>1、OS X系统安装(brew 方式)</p>
<pre><code class="language-sh">$ brew install geos
</code></pre>
<p>2、Ubuntu</p>
<pre><code class="language-sh">$ apt-get install libgeos-dev
</code></pre>
<p>3、源码安装</p>
<pre><code class="language-sh">$ wget http://download.osgeo.org/geos/geos-3.9.0.tar.bz2
$ tar xvfj geos-3.9.0.tar.bz2
$ cd geos-3.9.0
$ ./configure
$ make
$ sudo make install
</code></pre>
<h2 id="目录结构">目录结构</h2>
<ol>
<li><code>geo</code> 包下是对<code>GEOS C</code>库的引用和调用，以此来实现空间运算。</li>
<li><code>algorithm</code> 是对外暴露的空间运算方法定义。</li>
<li><code>strategy.go</code> 定义了空间运算底层算法的选择实现。</li>
</ol>
<h2 id="使用说明">使用说明</h2>
<p>以计算面积<code>Area</code>为例。</p>
<pre><code>package main

import (
	&quot;fmt&quot;
	&quot;github.com/spatial-go/geoos&quot;
)

func main() {
	// First, choose the default algorithm.
	strategy := geoos.NormalStrategy()
	// Secondly, manufacturing test data and convert it to geometry
	const wkt = `POLYGON((-1 -1, 1 -1, 1 1, -1 1, -1 -1))`
	geometry, _ := geoos.UnmarshalString(wkt)
	// Last， call the Area () method and get result.
	area, e := strategy.Area(geometry)
	if e != nil {
		fmt.Printf(e.Error())
	}
	fmt.Printf(&quot;%f&quot;, area)
	// get result 4.0
}

</code></pre>
<h2 id="维护者">维护者</h2>
<p><a href="https://github.com/spatial-go">@spatial-go</a>。</p>
<h2 id="如何贡献">如何贡献</h2>
<p>感谢 <a href="https://www.osgeo.org/">OSGeo</a>，我们也将秉承“开放、共创、共赢”的目标理念在空间计算领域贡献自己的一份力量。</p>
<p>非常欢迎你的加入！<a href="https://github.com/spatial-go/geos/issues/new">提一个 Issue</a></p>
<p>联系邮箱： <a href="geoos@changjing.ai">geoos@changjing.ai</a></p>
<h2 id="使用许可">使用许可</h2>
<p><a href="LICENSE">LGPL-2.1 </a></p>
]]></content>
    </entry>
</feed>